{"version":3,"sources":["App.js","useMedia.js","useMeasure.js","serviceWorker.js","index.js"],"names":["data","Array","from","length","_","i","key","App","columns","queries","values","defaultValue","match","useCallback","findIndex","q","matchMedia","matches","useState","value","set","useEffect","handler","window","addEventListener","removeEventListener","useMedia","ref","useRef","left","top","width","height","bounds","ResizeObserver","entry","contentRect","ro","observe","current","disconnect","useMeasure","items","id","setTimeout","shuffle","clearTimeout","heights","fill","gridItems","map","child","column","indexOf","Math","min","xy","transitions","useTransition","item","opacity","enter","update","leave","config","mass","tension","friction","trail","className","style","max","props","div","transform","interpolate","x","y","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c96d780f.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useState, useEffect } from 'react'\nimport { animated, useTransition } from 'react-spring'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport useMedia from './useMedia'\nimport useMeasure from './useMeasure'\n\nconst data = Array.from({ length: 15 }, (_, i) => ({ key: i + 1 }))\n\nfunction App() {\n  const columns = useMedia(\n    ['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'],\n    [5, 4, 3],\n    2,\n  )\n\n  const [{ ref }, { width }] = useMeasure()\n\n  const [items, set] = useState(data)\n\n  useEffect(() => {\n    const id = setTimeout(() => set(shuffle), 2000)\n    return () => clearTimeout(id)\n  })\n\n  const heights = new Array(columns).fill(0)\n\n  const gridItems = items.map((child) => {\n    const column = heights.indexOf(Math.min(...heights))\n    const xy = [(width / columns) * column, heights[column]]\n    heights[column] += width / columns\n    return {\n      ...child,\n      xy,\n      width: width / columns,\n      height: width / columns,\n    }\n  })\n\n  const transitions = useTransition(gridItems, (item) => item.key, {\n    from: ({ xy, width, height }) => ({\n      xy,\n      width,\n      height,\n      opacity: 0,\n    }),\n    enter: ({ xy, width, height }) => ({\n      xy,\n      width,\n      height,\n      opacity: 1,\n    }),\n    update: ({ xy, width, height }) => ({ xy, width, height }),\n    leave: { height: 0, opacity: 0 },\n    config: { mass: 5, tension: 500, friction: 100 },\n    trail: 25,\n  })\n\n  return (\n    <div ref={ref} className=\"list\" style={{ height: Math.max(...heights) }}>\n      {transitions.map(({ item, props: { xy, ...style }, key }) => (\n        <animated.div\n          key={key}\n          style={{\n            ...style,\n            transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`),\n          }}\n        >\n          <div>{item.key}</div>\n        </animated.div>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import { useEffect, useState, useCallback } from 'react'\n\nexport default function useMedia(queries, values, defaultValue) {\n  const match = useCallback(\n    // eslint-disable-next-line max-len\n    () => values[queries.findIndex((q) => matchMedia(q).matches)] || defaultValue,\n    [defaultValue, queries, values],\n  )\n\n  const [value, set] = useState(match)\n\n  useEffect(() => {\n    const handler = () => set(match)\n    window.addEventListener('resize', handler)\n    return () => window.removeEventListener('resize', handler)\n  }, [match])\n  return value\n}\n","import { useRef, useState, useEffect } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nexport default function useMeasure() {\n  const ref = useRef()\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n  })\n  const [ro] = useState(\n    () => new ResizeObserver(([entry]) => set(entry.contentRect)),\n  )\n  useEffect(() => {\n    ro.observe(ref.current)\n    return () => ro.disconnect()\n  }, [ro])\n  return [{ ref }, bounds]\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}